#pragma once
/*
Schematic:
-------------------
|00000|00000|00000|
|0###0|0###0|0###0|
|0###0|0###0|0###0|
|0###0|0###0|0###0|
|00000|00000|00000|
-------------------
|00000|00000|00000|
|0###0|0###0|0###0|
|0###0|0###0|0###0|
|0###0|0###0|0###0|
|00000|00000|00000|
-------------------
|00000|00000|00000|
|0###0|0###0|0###0|
|0###0|0###0|0###0|
|0###0|0###0|0###0|
|00000|00000|00000|
-------------------
*/

#define GameFieldSize_X 19
#define GameFieldSize_Y 19


static const
char GameField[ GameFieldSize_X * GameFieldSize_Y ]=
{
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',
	'|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',
	'|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',
	'|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',' ','#','#','#',' ','|',
	'|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',' ',' ',' ',' ',' ','|',
	'-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-','-',
};

struct FieldPart{
	BYTE dwStartColumn; //Y
	BYTE dwEndColumn; //Y
	BYTE dwStartRow; //X
	BYTE dwEndRow; //X
};
static
FieldPart g_FieldEntrys[] = {
	//	StartYY		EndXX
	//-------------------------------------------
		{ 2, 4,		 2, 4},
		{ 2, 4,		 8,10},
		{ 2, 4,		14,16},
	//-------------------------------------------
		{ 8,10,		 2, 4},
		{ 8,10,		 8,10},
		{ 8,10,		14,16},
	//-------------------------------------------
		{14,16,		 2, 4},
		{14,16,		 8,10},
		{14,16,		14,16},
};

enum TeamID
{
	TeamID_TeamOne,
	TeamID_TeamTwo,
	TeamID_Max
};

struct SymbolTeam
{
	char* SymbolTeamName;
	WORD SymbolColor;
	char SymbolChars[9];
};
static
SymbolTeam g_Teams[] = {
	//------------- Team One -------------
	{	/*SymbolTeamName =*/"Red-X", 
		/*SymbolColor =*/FOREGROUND_RED | FOREGROUND_INTENSITY, 
		/*SymbolChars[] = */
		{	'X',' ','X',
			' ','X',' ',
			'X',' ','X',
		} 
	},
	//------------- Team Two -------------
	{	/*SymbolTeamName =*/"Green-O", 
		/*SymbolColor =*/FOREGROUND_GREEN | FOREGROUND_INTENSITY, 
		/*SymbolChars[] = */
		{	'0','0','0',
			'0',' ','0',
			'0','0','0',
		} 
	},
};
static
BYTE GameFieldTeams[9] = { //0 = not set, teamid+1 = set
	0,0,0,
	0,0,0,
	0,0,0,
};
static const
BYTE WinningCombinations[8][3] = {
	//x  
	// x 
	//  x
	{  0,  4,  8 },

	//  x
	// x 
	//x  
	{  2,  4,  6 },

	//xxx
	{  0,  1,  2 },

	//   
	//xxx
	//   
	{  3,  4,  5 },

	//   
	//
	//xxx
	{  6,  7,  8 },

	//x
	//x
	//x
	{  0,  3,  6 },

	// x
	// x
	// x
	{  1,  4,  7 },

	//  x
	//  x
	//  x
	{  2,  5,  8 },
};

extern HANDLE hStdOutHandle;
extern HANDLE hStdInHandle;

extern CHAR_INFO consoleBuffer[GameFieldSize_X * GameFieldSize_Y];
void ResetGameField(CHAR_INFO* consoleBuffer);

void HandleClickAt(CHAR_INFO* consoleBuffer, SHORT ClickX, SHORT ClickY );